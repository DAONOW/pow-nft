{"ast":null,"code":"import { ethers } from 'ethers';\nimport { resolveIPFSData } from 'wallet/proposal';\nimport ProposalAbi from 'abi/Proposal.json';\nimport NftAbi from 'abi/MainNft.json';\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\nconst nftContractAddress = '0xa16E02E87b7454126E5E10d957A927A7F5B5d2be'; // proposal contract initiator\n\nexport const ProposalContract = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n}; // nft contract initiator\n\n_c = ProposalContract;\nexport const NftContract = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const nftContract = new ethers.Contract(nftContractAddress, NftAbi.abi, await provider.getSigner());\n    return nftContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n_c2 = NftContract;\nexport const fetchContractOwner = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const owner = await Proposal.owner();\n    console.log(owner);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchProposalCount = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchAllProposals = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const approveProposal = async proposalId => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createProposal = async dataURL => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchNftCount = async () => {\n  try {\n    let NFT = await NftContract();\n    let count = await NFT.tokenId();\n    let owner = await NFT.ownerOf(0);\n    return count.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchNFTMetadataByIds = async ids => {\n  try {\n    const NFT = await NftContract();\n    const allData = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const tokenId = ids[i];\n      const tokenURI = await NFT.tokenURI(tokenId);\n      let metadata = await resolveIPFSData(tokenURI);\n      allData.push({\n        tokenId: tokenId,\n        metadata\n      });\n    }\n\n    return allData;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchOwnedNFTs = async address => {\n  try {\n    const NFT = await NftContract();\n    const count = await NFT.tokenId();\n    let ownedNFTIds = [];\n\n    for (let i = 0; i < count; i++) {\n      if ((await NFT.ownerOf(i)) === address) {\n        ownedNFTIds.push(i);\n      }\n    }\n\n    let allData = await fetchNFTMetadataByIds(ownedNFTIds);\n    console.log(allData);\n    return allData;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProposalContract\");\n$RefreshReg$(_c2, \"NftContract\");","map":{"version":3,"sources":["/Users/K.Z./Desktop/crypto/pow-nft/frontend/src/wallet/contractHelpers.ts"],"names":["ethers","resolveIPFSData","ProposalAbi","NftAbi","proposalContractAddress","nftContractAddress","ProposalContract","provider","providers","Web3Provider","window","ethereum","proposalContract","Contract","abi","getSigner","err","console","log","NftContract","nftContract","fetchContractOwner","Proposal","owner","fetchProposalCount","proposalCount","proposalID","toNumber","fetchAllProposals","allProposals","i","fetchedProposal","Proposals","push","approveProposal","proposalId","createProposal","dataURL","fetchNftCount","NFT","count","tokenId","ownerOf","fetchNFTMetadataByIds","ids","allData","length","tokenURI","metadata","fetchOwnedNFTs","address","ownedNFTIds"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport { resolveIPFSData, work } from 'wallet/proposal';\nimport ProposalAbi from 'abi/Proposal.json';\nimport NftAbi from 'abi/MainNft.json';\n\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\nconst nftContractAddress = '0xa16E02E87b7454126E5E10d957A927A7F5B5d2be';\n\n// proposal contract initiator\nexport const ProposalContract = async (): Promise<any> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// nft contract initiator\nexport const NftContract = async (): Promise<any> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const nftContract = new ethers.Contract(nftContractAddress, NftAbi.abi, await provider.getSigner());\n    return nftContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchContractOwner = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const owner = await Proposal.owner();\n    console.log(owner);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchProposalCount = async (): Promise<number | void> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchAllProposals = async (): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const approveProposal = async (proposalId: number): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createProposal = async (dataURL: string): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchNftCount = async (): Promise<any> => {\n  try {\n    let NFT: any = await NftContract();\n\n    let count = await NFT.tokenId();\n    let owner = await NFT.ownerOf(0);\n\n    return count.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchNFTMetadataByIds = async (ids: number[]): Promise<any> => {\n  try {\n    const NFT: any = await NftContract();\n    const allData = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const tokenId = ids[i];\n      const tokenURI = await NFT.tokenURI(tokenId);\n      let metadata = await resolveIPFSData(tokenURI);\n      allData.push({\n        tokenId: tokenId,\n        metadata,\n      });\n    }\n    return allData;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchOwnedNFTs = async (address: string): Promise<work[]> => {\n  try {\n    const NFT: any = await NftContract();\n    const count = await NFT.tokenId();\n\n    let ownedNFTIds = [];\n    for (let i = 0; i < count; i++) {\n      if ((await NFT.ownerOf(i)) === address) {\n        ownedNFTIds.push(i);\n      }\n    }\n    let allData = await fetchNFTMetadataByIds(ownedNFTIds);\n    console.log(allData);\n    return allData;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}