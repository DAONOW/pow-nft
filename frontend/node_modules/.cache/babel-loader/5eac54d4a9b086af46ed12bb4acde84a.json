{"ast":null,"code":"import { ethers } from 'ethers';\nimport ProposalAbi from 'abi/Proposal.json';\nimport NftAbi from 'abi/MainNft.json';\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\nconst nftContractAddress = '0xa16E02E87b7454126E5E10d957A927A7F5B5d2be';\nexport const ProposalContract = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n_c = ProposalContract;\nexport const NftContract = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const nftContract = new ethers.Contract(nftContractAddress, NftAbi.abi, await provider.getSigner());\n    return nftContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n_c2 = NftContract;\nexport const fetchProposalCount = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchAllProposals = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const approveProposal = async proposalId => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createProposal = async dataURL => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchNftCount = async () => {\n  try {\n    let NFT = await NftContract();\n    let count = await NFT.tokenId();\n    let owner = await NFT.ownerOf(0);\n    console.log(owner);\n    return count.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchOwnedNFTs = async address => {\n  try {\n    const NFT = await NftContract();\n    const count = await NFT.tokenId();\n    let ownedNFTIds = [];\n\n    for (let i = 0; i < count; i++) {\n      if ((await NFT.ownerOf(i)) === address) {\n        ownedNFTIds.push(i);\n      }\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProposalContract\");\n$RefreshReg$(_c2, \"NftContract\");","map":{"version":3,"sources":["/Users/K.Z./Desktop/crypto/pow-nft/frontend/src/common/wallet/contractHelpers.ts"],"names":["ethers","ProposalAbi","NftAbi","proposalContractAddress","nftContractAddress","ProposalContract","provider","providers","Web3Provider","window","ethereum","proposalContract","Contract","abi","getSigner","err","console","log","NftContract","nftContract","fetchProposalCount","Proposal","proposalCount","proposalID","toNumber","fetchAllProposals","allProposals","i","fetchedProposal","Proposals","push","approveProposal","proposalId","createProposal","dataURL","fetchNftCount","NFT","count","tokenId","owner","ownerOf","fetchOwnedNFTs","address","ownedNFTIds"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport ProposalAbi from 'abi/Proposal.json';\nimport NftAbi from 'abi/MainNft.json';\n\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\nconst nftContractAddress = '0xa16E02E87b7454126E5E10d957A927A7F5B5d2be';\n\nexport const ProposalContract = async (): Promise<any> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const NftContract = async (): Promise<any> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const nftContract = new ethers.Contract(nftContractAddress, NftAbi.abi, await provider.getSigner());\n    return nftContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchProposalCount = async (): Promise<number | void> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchAllProposals = async (): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const approveProposal = async (proposalId: number): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createProposal = async (dataURL: string): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchNftCount = async (): Promise<any> => {\n  try {\n    let NFT: any = await NftContract();\n\n    let count = await NFT.tokenId();\n    let owner = await NFT.ownerOf(0);\n    console.log(owner);\n\n    return count.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchOwnedNFTs = async (address: string): Promise<any> => {\n  try {\n    const NFT: any = await NftContract();\n    const count = await NFT.tokenId();\n\n    let ownedNFTIds = [];\n    for (let i = 0; i < count; i++) {\n      if ((await NFT.ownerOf(i)) === address) {\n        ownedNFTIds.push(i);\n      }\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}