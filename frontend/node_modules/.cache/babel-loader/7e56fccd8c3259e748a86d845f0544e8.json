{"ast":null,"code":"import { ethers } from 'ethers';\nimport ProposalAbi from 'abi/Proposal.json';\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\nexport const ProposalContract = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n_c = ProposalContract;\nexport const fetchProposalCount = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchAllProposals = async () => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const approveProposal = async proposalId => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createProposal = async dataURL => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ProposalContract\");","map":{"version":3,"sources":["/Users/K.Z./Desktop/crypto/pow-nft/frontend/src/common/wallet/contractHelpers.ts"],"names":["ethers","ProposalAbi","proposalContractAddress","ProposalContract","provider","providers","Web3Provider","window","ethereum","proposalContract","Contract","abi","getSigner","err","console","log","fetchProposalCount","Proposal","proposalCount","proposalID","toNumber","fetchAllProposals","allProposals","i","fetchedProposal","Proposals","push","approveProposal","proposalId","createProposal","dataURL"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,uBAAuB,GAAG,4CAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,YAA0B;AACxD,MAAI;AACF,UAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,UAAMC,gBAAgB,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBR,uBAApB,EAA6CD,WAAW,CAACU,GAAzD,EAA8D,MAAMP,QAAQ,CAACQ,SAAT,EAApE,CAAzB;AAEA,WAAOH,gBAAP;AACD,GALD,CAKE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CATM;KAAMV,gB;AAWb,OAAO,MAAMa,kBAAkB,GAAG,YAAoC;AACpE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMd,gBAAgB,EAAvC;AACA,UAAMe,aAAa,GAAG,MAAMD,QAAQ,CAACE,UAAT,EAA5B;AACA,WAAOD,aAAa,CAACE,QAAd,EAAP;AACD,GAJD,CAIE,OAAOP,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMQ,iBAAiB,GAAG,YAA0B;AACzD,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMd,gBAAgB,EAAvC;AACA,UAAMe,aAAa,GAAG,MAAMF,kBAAkB,EAA9C;AAEA,UAAMM,YAAY,GAAG,EAArB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAApB,EAAmCK,CAAC,EAApC,EAAwC;AACtC,YAAMC,eAAe,GAAG,MAAMP,QAAQ,CAACQ,SAAT,CAAmBF,CAAnB,CAA9B;AACAD,MAAAA,YAAY,CAACI,IAAb,CAAkBF,eAAlB;AACD;;AAED,WAAOF,YAAP;AACD,GAZD,CAYE,OAAOT,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMc,eAAe,GAAG,MAAOC,UAAP,IAA4C;AACzE,MAAI;AACF,UAAMX,QAAQ,GAAG,MAAMd,gBAAgB,EAAvC;AACA,UAAMc,QAAQ,CAACU,eAAT,CAAyBC,UAAzB,CAAN;AACD,GAHD,CAGE,OAAOf,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAPM;AASP,OAAO,MAAMgB,cAAc,GAAG,MAAOC,OAAP,IAAyC;AACrE,MAAI;AACF,UAAMb,QAAQ,GAAG,MAAMd,gBAAgB,EAAvC;AACA,UAAMc,QAAQ,CAACY,cAAT,CAAwBC,OAAxB,CAAN;AACD,GAHD,CAGE,OAAOjB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAPM","sourcesContent":["import { ethers } from 'ethers';\nimport ProposalAbi from 'abi/Proposal.json';\n\nconst proposalContractAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';\n\nexport const ProposalContract = async (): Promise<any> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    const proposalContract = new ethers.Contract(proposalContractAddress, ProposalAbi.abi, await provider.getSigner());\n\n    return proposalContract;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchProposalCount = async (): Promise<number | void> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await Proposal.proposalID();\n    return proposalCount.toNumber();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchAllProposals = async (): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    const proposalCount = await fetchProposalCount();\n\n    const allProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const fetchedProposal = await Proposal.Proposals(i);\n      allProposals.push(fetchedProposal);\n    }\n\n    return allProposals;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const approveProposal = async (proposalId: number): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.approveProposal(proposalId);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createProposal = async (dataURL: string): Promise<any> => {\n  try {\n    const Proposal = await ProposalContract();\n    await Proposal.createProposal(dataURL);\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}