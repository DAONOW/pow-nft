{"ast":null,"code":"import { ethers } from 'ethers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { Web3Provider } from '@ethersproject/providers';\nvar ConnectorNames;\n\n(function (ConnectorNames) {\n  ConnectorNames[\"Injected\"] = \"Injected\";\n  ConnectorNames[\"Network\"] = \"Network\";\n  ConnectorNames[\"WalletConnect\"] = \"WalletConnect\";\n  ConnectorNames[\"WalletLink\"] = \"WalletLink\";\n  ConnectorNames[\"Ledger\"] = \"Ledger\";\n  ConnectorNames[\"Trezor\"] = \"Trezor\";\n  ConnectorNames[\"Lattice\"] = \"Lattice\";\n  ConnectorNames[\"Frame\"] = \"Frame\";\n  ConnectorNames[\"Authereum\"] = \"Authereum\";\n  ConnectorNames[\"Fortmatic\"] = \"Fortmatic\";\n  ConnectorNames[\"Magic\"] = \"Magic\";\n  ConnectorNames[\"Portis\"] = \"Portis\";\n  ConnectorNames[\"Torus\"] = \"Torus\";\n})(ConnectorNames || (ConnectorNames = {}));\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1337]\n});\nexport const loadWeb3 = async () => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any'); // Prompt user for account connections\n\n    await provider.send('eth_requestAccounts', []);\n    const signer = provider.getSigner();\n    const address = await signer.getAddress();\n    const balance = await signer.getBalance(); // or provider.getBalance(address)\n\n    console.log(address, balance);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport function getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n} // import { SupportedChainId } from '../constants/chains'\n// const NETWORK_POLLING_INTERVALS: { [chainId: number]: number } = {\n//   [SupportedChainId.ARBITRUM_ONE]: ms`1s`,\n//   [SupportedChainId.ARBITRUM_RINKEBY]: ms`1s`,\n//   [SupportedChainId.OPTIMISM]: ms`1s`,\n//   [SupportedChainId.OPTIMISTIC_KOVAN]: ms`1s`,\n// }","map":{"version":3,"sources":["/Users/K.Z./Desktop/crypto/pow-nft/frontend/src/common/wallet/initializeWallet.ts"],"names":["ethers","InjectedConnector","Web3Provider","ConnectorNames","injected","supportedChainIds","loadWeb3","provider","providers","window","ethereum","send","signer","getSigner","address","getAddress","balance","getBalance","console","log","err","getLibrary","library","pollingInterval"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;IAQKC,c;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAgBL,OAAO,MAAMC,QAAQ,GAAG,IAAIH,iBAAJ,CAAsB;AAAEI,EAAAA,iBAAiB,EAAE,CAAC,IAAD;AAArB,CAAtB,CAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,YAA2B;AACjD,MAAI;AACF,UAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBN,YAArB,CAAkCO,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB,CADE,CAGF;;AACA,UAAMH,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AAEA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AAEA,UAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAtB;AACA,UAAMC,OAAO,GAAG,MAAMJ,MAAM,CAACK,UAAP,EAAtB,CATE,CASyC;;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqBE,OAArB;AACD,GAXD,CAWE,OAAOI,GAAP,EAAY;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,CAfM;AAiBP,OAAO,SAASC,UAAT,CAAoBd,QAApB,EAAiD;AACtD,QAAMe,OAAO,GAAG,IAAIpB,YAAJ,CAAiBK,QAAjB,CAAhB;AACAe,EAAAA,OAAO,CAACC,eAAR,GAA0B,KAA1B;AACA,SAAOD,OAAP;AACD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ethers } from 'ethers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { Web3Provider } from '@ethersproject/providers';\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nenum ConnectorNames {\n  Injected = 'Injected',\n  Network = 'Network',\n  WalletConnect = 'WalletConnect',\n  WalletLink = 'WalletLink',\n  Ledger = 'Ledger',\n  Trezor = 'Trezor',\n  Lattice = 'Lattice',\n  Frame = 'Frame',\n  Authereum = 'Authereum',\n  Fortmatic = 'Fortmatic',\n  Magic = 'Magic',\n  Portis = 'Portis',\n  Torus = 'Torus',\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1337] });\n\nexport const loadWeb3 = async (): Promise<void> => {\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n\n    // Prompt user for account connections\n    await provider.send('eth_requestAccounts', []);\n\n    const signer = provider.getSigner();\n\n    const address = await signer.getAddress();\n    const balance = await signer.getBalance(); // or provider.getBalance(address)\n    console.log(address, balance);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\n// import { SupportedChainId } from '../constants/chains'\n\n// const NETWORK_POLLING_INTERVALS: { [chainId: number]: number } = {\n//   [SupportedChainId.ARBITRUM_ONE]: ms`1s`,\n//   [SupportedChainId.ARBITRUM_RINKEBY]: ms`1s`,\n//   [SupportedChainId.OPTIMISM]: ms`1s`,\n//   [SupportedChainId.OPTIMISTIC_KOVAN]: ms`1s`,\n// }\n"]},"metadata":{},"sourceType":"module"}